/*!
@~chinese
@file ddevice.h

@class Dtk::NetworkManager::DDevice ddevice.h
@brief 对于所有设备都有的属性和方法的封装

@fn QList<quint64> DDevice::availableConnections() const
@brief 获取该设备上现在可用的连接对象的id
@return 一个由id组成的列表

@fn bool DDevice::autoconnect() const
@brief 获取设备是否自动连接
@return 布尔值

@fn void DDevice::setAutoconnect(const bool autoconnect) const
@brief 设置设备是否可以自动连接
@param [in] autoconnect 是否自动连接
@note 不属于NetworkManager管理的设备无法设置

@fn bool DDevice::managed() const
@brief 获取该设备是否由NetworkManager管理
@return 布尔值

@fn void DDevice::setManaged(const bool managed) const
@brief 设置该设备是否由NetworkManager管理
@param [in] managed 是否管理

@fn quint64 DDevice::activeConnection() const
@brief 获取该设备上的活动连接对象的id
@return 活动连接对象的id

@fn quint64 DDevice::DHCP4Config() const
@brief 获取DHCP4配置对象的Id
@return DHCP4配置对象的Id

@fn quint64 DDevice::DHCP6Config() const
@brief 获取DHCP6配置对象的Id
@return DHCP6配置对象的Id

@fn quint64 DDevice::IPv4Config() const
@brief 获取IPv4配置对象的Id
@return IPv4配置对象的Id

@fn quint64 DDevice::IPv6Config() const
@brief 获取IPv6配置对象的Id属性
@return IPv6配置对象的Id

@fn QByteArray DDevice::driver() const
@brief 获取设备驱动名称
@return 设备驱动名称

@fn QByteArray DDevice::interface() const
@brief 获取设备的控制接口的名称
@return 设备的控制接口的名称

@fn QByteArray DDevice::udi() const
@brief 获取操作系统特定的临时设备硬件标识符
@return 操作系统特定的临时设备硬件标识符

@fn NMDeviceType DDevice::deviceType() const
@brief 获取设备类型
@return 代表类型的枚举值

@fn DeviceInterfaceFlags DDevice::interfaceFlags() const
@brief 获取接口的一些属性
@return 代表属性的枚举值

@fn NMDeviceState DDevice::deviceState() const
@brief 获取设备状态
@return 代表状态的枚举值

@fn quint32 DDevice::refreshRateMs() const
@brief 获取该设备接口rxBytes和txBytes的刷新率
@return 返回一个毫秒数

@fn void DDevice::setRefreshRateMs(const quint32 newRate) const
@brief 设置该设备接口rxBytes和txBytes的刷新率
@param [in] newRate 新的刷新率

@fn quint32 DDevice::rxBytes() const
@brief 获取接收字节数
@return 字节数

@fn quint32 DDevice::txBytes() const
@brief 获取传输字节数
@return 字节数

@fn DExpected<void> DDevice::disconnect() const
@brief 断开设备

@fn void DDevice::deviceStateChanged(const NMDeviceState newSatate, const NMDeviceState oldState, const NMDeviceStateReason reason)
@brief 信号, 当deviceState属性改变时触发

@fn void DDevice::availableConnectionsChanged(const QList<quint64> &conns)
@brief 信号, 当availableConnections属性改变时触发

@fn void DDevice::autoconnectChanged(const bool enabled)
@brief 信号, 当 autoconnect属性改变时触发

@fn void DDevice::managedChanged(const bool enabled)
@brief 信号, 当managed属性改变时触发

@fn void DDevice::activeConnectionChanged(const quint64 &conn)
@brief 信号, 当activeConnection属性改变时触发

@fn void DDevice::DHCP4ConfigChanged(const quint64 &config)
@brief 信号, 当DHCP4Config属性改变时触发

@fn void DDevice::DHCP6ConfigChanged(const quint64 &config)
@brief 信号, 当DHCP6Config属性改变时触发

@fn void DDevice::IPv4ConfigChanged(const quint64 &config)
@brief 信号, 当IPv4Config属性改变时触发

@fn void DDevice::IPv6ConfigChanged(const quint64 &config)
@brief 信号, 当IPv6Config属性改变时触发

@fn void DDevice::driverChanged(const QByteArray &driver)
@brief 信号, 当driver属性改变时触发

@fn void DDevice::interfaceChanged(const QByteArray &ifc)
@brief 信号, 当interface属性改变时触发

@fn void DDevice::udiChanged(const QByteArray &udi)
@brief 信号, 当udi属性改变时触发

@fn void DDevice::deviceTypeChanged(const NMDeviceType type)
@brief 信号, 当deviceType属性改变时触发

@fn void DDevice::interfaceFlagsChanged(const DeviceInterfaceFlags flags)
@brief 信号, 当interface属性改变时触发

@fn void DDevice::refreshRateMsChanged(const quint32 rate)
@brief 信号, 当refreshRateMs属性改变时触发

@fn void DDevice::rxBytesChanged(const quint32 bytes)
@brief 信号, 当rxBytes属性改变时触发

@fn void DDevice::txBytesChanged(const quint32 bytes)
@brief 信号, 当txBytes属性改变时触发

*/
