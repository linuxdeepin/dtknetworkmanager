/*!
@~chinese
@file dsecretagent.h

使用者需要继承这个类并且实现对应接口

@class Dtk::NetworkManager::DSecretAgent dsecretagent.h
@brief 对于秘密代理的方法的封装

@fn DExpected<SettingDesc> DSecretAgent::secrets(const SettingDesc &conn,const quint64 connId,const QByteArray &settingName,const QList<QByteArray> &hints,const SecretFlags &flags) const;
@brief 获取对应连接的秘密
@param [in] conn 秘密所在的由秘密项组成的map
@param [in] connId 对应连接配置对象的Id
@param [in] settingName 想要获取秘密的名称
@param [in] hints 所请求的设置中NetworkManager认为可能需要保密的密钥名称的字符串数组, 和/或在处理保密请求时可能对客户端有用的知名标识符和数据
@param [in] flags 修改秘密请求行为的标志
@return 存有秘密的map

@fn DExpected<void> DSecretAgent::cancelSecrets(const quint64 connId, const QByteArray &settingName) const;
@brief 取消获取秘密
@param [in] connId 对应连接配置对象的Id
@param [in] settingName 对应的配置名

@fn DExpected<void> DSecretAgent::saveSecret(const SettingDesc &connSettigns, const quint64 connId) const;
@brief 保存秘密
@param [in] connSettigns 包含秘密的配置项
@param [in] connId 对应连接配置对象的Id

@fn DExpected<void> DSecretAgent::deleteSecret(const SettingDesc &connSettigns, const quint64 connId) const;
@brief 删除秘密
@param [in] connSettigns 包含秘密的配置项
@param [in] connId 对应连接配置对象的Id

*/
